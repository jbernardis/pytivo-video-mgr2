# vidmgr.ini
#
# this is the global options file - it belongs in the vidmgr directory under pyhme
#
# Default values are specified below.  
#
# NOTE:
#
# several of these parameters can be overridden within a specific directory tree by placing a .vidmgr.ini file into
# the root of that subtree.  See .vidmgr.ini.dist for a description of the settings that can be so changed.

#
# NOTE:
#
# These default values do NOT need to be explicitly stated in this file.  They are here for illustration
# you can leave them in here if you want, or you can remove them and only include in here the options you
# are changing
#

#
# vidmgr section is mandatory
#

[vidmgr]

#
# what file extensions are we interested in.  Only files with these extensions will be
# displayed on screen
# specify a list of file extensions - with the .  - separated by at least one space
#

exts=.mp4 .mpg .avi .wmv

#
# the next 4 options specify format information for the info screen that pops up
# when you press the info button. 
# specify a list of metadata tags for each.
#

metaignore=isEpisode isEpisodic __fileName __filePath
metafirst=title seriesTitle episodeTitle description
metaspacebefore=
metaspaceafter=

#
# the next two options are also formatting options for the info screen.  The info screen is 
# a two column layout.  the infolabelpercent option indicates what percentage of the
# screen width should be devoted to the label column
#
# the inforightmargin option specifies the width of the right margin on the info screen.  If
# you find the text running up against the right edge of the screen, increase this number.
#

infolabelpercent=30
inforightmargin=20

#
# the next two options control how multiple metadata files are handled.  When searching for
# metadata, vidmgr looks for the files in the following sequence:
#      .meta/default.txt
#      default.txt
#      .meta/<videofilename>.txt
#      <videofilename>.txt
#
# metamergefiles determines if the contents of one file are merged with previous files or if
# it completely replaces the previous file.  If this is set to true, since the files are read
# from the general to the specific, more specific information will replace more general information,
# but the end result will be the union of all the files.  If this is set to false, then only the
# information in the last file read will be kept.
#
# metamergelines if only meaningful if metamergefiles is set to true.  If set to true, then if
# two files contain the same metadata tag, then the values are concatenated together.  If set to 
# false, then the value from the second file replaces the value from the first file.  Note - 
# metadata tags that are already lists (vActor, etc) are always merged regardless of the value of
# this option.
#

metamergefiles=True
metamergelines=False

#
# specify the point size of the font used to display the descriptive text of a video on the main screen
#

descsize=20

#
# the image files that vidmgr uses for its background, etc, can be replaced.  These files all reside
# in a directory named 'skins' under the vidmgr directory.  If you wish to use your own image files, 
# create a directory under skins, place your files there, and name that directory with the skin option.
# Note: the files must be png files and must match the original images in size.  Only the images being
# changed need be specified.  If an image file is NOT found in your skin's directory, the corresponding
# file is taken from the main skins directory.
# 
# There is no default for this.  Do Not include this option unless you are using your own skin
#
# skin=

# 
# can the files in this directory be deleted - specify true or false.  
#

deleteallowed=True

#
# specify how you would like the artwork for a video to be justified - specify left, center, or right
#

thumbjustify=left

#
# specify the name of the file to use for the folder and for the video file if a video specific file is not found
#

thumbfolderfn=folder.jpg

#
# what metadata tags should be used to construct the string used to identify this file on the screen
# specify a list of metadata tags - including any metadata tags you may have created yourself.  In addition to the
# normal metadata tags, you can use the word 'file' to indicate the video's file name (without the directory) and 
# you can use the value 'titleNumber' to indicate the title number for a DVD video.
#

display=title episodeTitle

#
# what string should be used to separate the above metadata when constructing the title string
# specify an arbitrary string
#

displaysep=:

#
# what metadata tags should be used to construct the string that is used to sort the videos when they
# are displayed in a list specify a list of metadata tags - including any metadata tags you may have created yourself.  In addition to the
# normal metadata tags, you can use the word '__fileName' (or 'file') to indicate the video's file name (without the directory),
# '__filePath' to indicate the video's full directory path, or the value 'titleNumber' to indicate the title number for a DVD video.
#

sort=title episodeTitle

#
# which direction should the sort be
# specify up for an ascending sort or down for a descending sort
#

sortdirection=up

# 
# should a leading article (the, a, an) in a 'title' or 'episodeTitle' be ignored when sorting on that title.  Note that the displayed
# title will not change i.e. "The Abyss" will still show up as "The Abyss", but it will be sorted in with the A titles.
#

ignorearticle=True

# 
# the next options control the contents of the top of the navigation tree.  If sharepage is set to true, the top page will
# contain an entry that says 'Browse Shares'.  This will take you to a separate page where the shares are listed.
# If it is set to false, then each share will be on the top screen.
# if sortroot is true, the virtual shares and the actual shares will be sorted together.  If it is false (the default)
# then the actual shares will appear above the virtual shares.  Both will be sorted, but one will appear before the other
#

sharepage=true
sortroot=false

#
# what text string should be used for the subtitle on the top navigation screen.  The subtitle normally gives
# a cue as to where you are in the navigation, but no such cue is necessary when at the top; this string will
# be displayed instead
#      default: topsubtitle=Main Menu
#
# topsubtitle=

#
# by default, vidmgr will check file unique IDs so that it knows if two files are actually the same file with two
# different links.  On windows, this is an expensive operation.  This affects the amount of time needed to build
# the cache.  If you are not using links in your video directories, you can essentially disable this logic by
# setting the following option to false.  The default is true
#

usefileid=true

#
# the following option, when set to true, causes the time of a push operation and the name of the tivo that was pushed to
# to be saved in the meta file.  Default is false.  This used to be savepushdate.  For backward compatibility, savepushdate
# is a synonym for savepushdata
#

savepushdata=false

#
# the following option, when set to false, causes the list of tivos in the push menu to be in the numeric order that
# they are listed in the ini file.  True (the default) sorts them alphabetically by their name
#

sorttivosbyname=true


#
# the tivos section of the file is where you identify your Tivos.  For each tivo, you MUST provide a name and
# a TSN.  It is NOT necessary to put the dashes into the TSN - just use the digits.  In the tags below, replace the
# X with a digit starting at 1 (e.g. tivo1.name).  If you have multiple tivos, number them sequentially.  You can have
# an arbitrary number of tivos, but vidmgr will stop parsing the file as soon as it detects a gap in the
# numbering sequence.  These fields have no default values.
#

[tivos]
# tivoX.name=
# tivoX.tsn=



# 
# the pytivos section is where you identify your pytivo processes.  The tags are numbered as above - replace the X
# with a digit starting from 1 andproceeding sequentially from there.  You MUST provide config - which is a full
# path to the pyTivo.conf file, and ip - which is the ip address of the machine on which pytivo is running.  If 
# the config file does NOT specify a port number for pytivo, then you MUST specify it here.  pytivoX.skip is a 
# comma-delimited list of shares that you do NOT want to include here - do NOT use extra spaces in this list.
# pytivoX.sep is the file path separator for the machine on which pytivo is running - if this is omitted, then
# the seperator character for the machine on which vidmgr is used.
#

[pytivos]
# pytivoX.config=
# pytivoX.sep=
# pytivoX.ip=
# pytivoX.port=
# pytivoX.skip=



#
# now come the virtual shares - there can be an arbitrary number of these.  Whatever text you put between the square
# brackets as the section name will become the text that appears on the navigation screen.  Each virtual share MUST
# have a specification for which files to include.  Additionally, you can override sort and display options, and you
# can specify how files should be grouped
#
[virtual share name X]

#
# there are four possible ways to indicate which files to include.  You must use exactly 1 of them for each virtual share:
#
# 1. specify which metadata tags are used to divide videos up into groups:
#
# tags=tag1 tag2 tag3 ... tagn
#
# each video is searched for the specified tags.  If a video does not have ANY of these tags, it is skipped.  If it has ANY
# of the tags, then the video file will be inserted into a group for each value.  For example, if the tag was vActor, then
# for each actor in a file, that file would be inserted into a group with that actor's name as the group name.  As other
# videos are found with this same actor, they will be added to the existing group.  What you end up with is a main menu choice
# for the virtual share (the text in the brackets) and when you choose it, you will see all the actors found in the metadata
# as separate "folders".  If you then navigate into those folders, you will see all the videos that each actor is in.  In addition
# to all of the normal metadata tags, including your own, you can use titleNumber which is the title number for DVD titles.
#
#
# 2. specify metadata VALUES that must be matched for a video to be included:
#
# values = tag:val,val.../tag:val,val...
#
# each video is searched for the specified tag(s).  If a video does not contain any of the tags, it is skipped.  If it DOES
# contain a tag, then the value for that tag MUST be one of the values listed.  If it's not, then the video is skipped.  If 
# multiple tags are specified, a video will match only if 1) it contains ALL of the tags, and 2) each value for EVERY tag
# is in the specified list.  Spaces are significant for the values.  Do not use any unnecessary spaces in the specification.
# As an example, values=isEpisodic:true,True,TRUE  will include ALL videos for which the value for isEpisodic is true, True, 
# or TRUE.  As with tags, the metadata tags can be any of the normal tags, including your own, or titleNumber which is the
# title number for DVD videos.
#
#
# 3. select videos based on a metadata tag, but group them into alphabetical folders (e.g. "A", "B", ... "9", "<Other>")
#
# alpha = tag
#
# for example, specifying alpha=Title will organize all videos into title order, but it will produce a separate "folder"
# for each occurring letter or digit.  Titles that do not have a leading letter or digit are placed into an "<Other>" folder.
# Only letters and digits that have at least one video will be presented.  The ignorearticle option affects Alpha shares
# if the tag is either 'title' or 'episodeTitle'
#
#
# 4. include ALL videos unconditionally:
#
# values=all
#
# this is useful in conjunction with the other options below.  For example if you want a share that includes all videos
# sorted by record date.
#

#
# within the videos selected for a virtual share, you can add one layer of grouping.  This is provided by the groupby
# option.  The tags option above already offers a layer of grouping, so this option is probably more useful for the
# values and alpha options, but it CAN be used with tags.
#
# to use this option, specify a SINGLE metadata tag.  For each matching video, the value for this tag is used to create/identify
#  a "folder" into which this video is placed.  If the video does NOT contain the tag, then the video is placed in the root
# "folder".  As a good example, let's extend the isEpisodic example from above.  If you say "values=isEpisodic:true,TRUE,True"
# all videos will show up in a single flat "folder".  They will be sorted, but it could be a large list.  If I
# add "groupby=seriesTitle", then vidmgr will create "sub-folders" for each series title thus organizing the files.
#
# it is possible, though not always practical, to use a list item (such as vActor) as the grouping item.  The video will appear in
# multiple folders, one for each entry in the list.
#
# it is also possible to use a special value "groupby=alpha" to group into the first character of the title item.  This allows you
# to, for example, break a potentially large list, like vActor, into separate alphabetical folders.  Only the first character is 
# considered, and a folder will be created alphanumeric characters only.  Lower case letters will be put into the corresponding
# upper case folder.  There is an addition OTHER folder for things that do not fit into the alphanumeric category
#
# groupby=

#
# you can specify a different sort order for the tags you are organizing by as opposed to the video titles themselves.  The videos
# are governed by the sortdirection and sort parameters, but the sort order of the tags is determined by the tagorder parameter, set
# to either up (default) or down.  This allows, for example, for the movies to be organized by year with the newest first, but within 
# a single year the titles would be in normal alphabetical order.
#
# tagorder=up

#
# it is possible to limit the selection of videos for a virtual share to a list of physical shares by using the
# shares= statement.  If omotted, ALL shares are considered as a source for videos
#
# shares=
# for example if all of your movies are in a share titled "My Movies", then then following
# [Movies Alphabetically]
# alpha=Title
# shares=My Movies
#
# will create a virtual share containing all videos from the My Movie share organized into alhpabetical folders

# finally, it is possible to override the sort, sortdirection, display, and displaysep options for this virtual share
# by simply specifying that option in the corresponding section.  If these are missing, then the global values will be used.
#
# display=
# displaysep=
# sort=
# sortdirection=



